{"version":3,"sources":["common/images/logo.png","auth0.js","common/Navbar.js","common/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","useStyles","makeStyles","root","position","width","box","minWidth","toolbar","backgroundColor","RED","button","marginLeft","color","bar","textAlign","Navbar","classes","isAuthenticated","loginWithRedirect","logout","className","Toolbar","Button","variant","onClick","drawerPaper","borderRight","logo","margin","links","icon","text","fontFamily","active","fontWeight","Sidebar","Drawer","anchor","paper","src","alt","List","ListItem","key","ListItemIcon","ListItemText","primary","App","Fragment","CssBaseline","Boolean","hostname","match","ReactDOM","render","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0470e4cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25e47b12.png\";","import React, { useState, useEffect, useContext } from \"react\";\r\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = () =>\r\n  window.history.replaceState({}, document.title, window.location.pathname);\r\n\r\nexport const Auth0Context = React.createContext();\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n  children,\r\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n  ...initOptions\r\n}) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState();\r\n  const [user, setUser] = useState();\r\n  const [auth0Client, setAuth0] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      const auth0FromHook = await createAuth0Client(initOptions);\r\n      setAuth0(auth0FromHook);\r\n\r\n      if (window.location.search.includes(\"code=\")) {\r\n        const { appState } = await auth0FromHook.handleRedirectCallback();\r\n        onRedirectCallback(appState);\r\n      }\r\n\r\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n\r\n      setIsAuthenticated(isAuthenticated);\r\n\r\n      if (isAuthenticated) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const loginWithPopup = async (params = {}) => {\r\n    setPopupOpen(true);\r\n    try {\r\n      await auth0Client.loginWithPopup(params);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setPopupOpen(false);\r\n    }\r\n    const user = await auth0Client.getUser();\r\n    setUser(user);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const handleRedirectCallback = async () => {\r\n    setLoading(true);\r\n    await auth0Client.handleRedirectCallback();\r\n    const user = await auth0Client.getUser();\r\n    setLoading(false);\r\n    setIsAuthenticated(true);\r\n    setUser(user);\r\n  };\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        popupOpen,\r\n        loginWithPopup,\r\n        handleRedirectCallback,\r\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n        logout: (...p) => auth0Client.logout(...p)\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport { useAuth0 } from '../auth0';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport RED from '@material-ui/core/colors/red';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"fixed\",\r\n        width: \"100%\",\r\n    },\r\n    box: {\r\n        width: \"15%\",\r\n        minWidth: \"175px\",\r\n    },\r\n    toolbar: {\r\n        backgroundColor: RED[300] //#E0E0E0\",\r\n    },\r\n    button: {\r\n        marginLeft: \"20px\",\r\n        color: \"#FFFFFF\",\r\n    },\r\n    bar: {\r\n        width: \"100%\",\r\n        textAlign: \"right\"\r\n    }\r\n});\r\n\r\nfunction Navbar() {\r\n    const classes = useStyles()\r\n    const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\r\n\r\n    return (\r\n        <div className={classes.root}>  \r\n            <Toolbar className={classes.toolbar}>\r\n                <div className={classes.box}/>\r\n                <div className={classes.bar}>\r\n                    { !isAuthenticated && (\r\n                        <Button variant=\"disabled\" className={classes.button} onClick={() => loginWithRedirect({})}>Log In</Button>\r\n                    )}\r\n                    { isAuthenticated &&  \r\n                        <Button variant=\"disabled\" className={classes.button} onClick={() => logout()}>Log Out</Button>\r\n                    }\r\n                </div>\r\n            </Toolbar>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport HomeIcon from '@material-ui/icons/HomeOutlined';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircleOutlined';\r\nimport FolderIcon from '@material-ui/icons/FolderOutlined';\r\n\r\nimport logo from './images/logo.png';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        \r\n    },\r\n    drawerPaper: {\r\n        borderRight: \"none\",\r\n    },\r\n    logo: {\r\n        width: \"15vw\",\r\n        minWidth: \"175px\",\r\n        margin: \"0 auto\",\r\n    },\r\n    links: {\r\n        margin: \"50px auto\",\r\n    },\r\n    icon: {\r\n        color: \"#757575\"\r\n    },\r\n    text: {\r\n        fontFamily: \"'Roboto', sans-serif\",\r\n        color: \"#757575\",\r\n    },\r\n    active: {\r\n        fontFamily: \"'Roboto', sans-serif\",\r\n        fontWeight: \"700\",\r\n        color: \"#757575\",\r\n    }\r\n});\r\n\r\nfunction Sidebar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer variant=\"permanent\" anchor=\"left\" className={classes.root} classes={{paper: classes.drawerPaper}}>\r\n            <img src={logo} alt=\"Logo\" className={classes.logo}/>\r\n            <List className={classes.links}>\r\n                <ListItem button key=\"Home\">\r\n                    <ListItemIcon className={classes.icon}><HomeIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Home\" className={classes.active}/>\r\n                </ListItem>\r\n                <ListItem button key=\"Characters\">\r\n                    <ListItemIcon className={classes.icon}><AccountCircleIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Characters\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Compendium\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Compendium\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Example1\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Example\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Example2\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Example\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Example3\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Example\" className={classes.text} />\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Navbar from './common/Navbar';\nimport Sidebar from './common/Sidebar';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Navbar />\n      <Sidebar />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./auth0.js\";\nimport config from \"./auth_config.json\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}