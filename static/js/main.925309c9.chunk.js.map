{"version":3,"sources":["common/images/logo.png","common/Navbar.js","common/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","position","width","box","minWidth","toolbar","backgroundColor","text","marginLeft","color","RED","Navbar","classes","className","Toolbar","Typography","variant","noWrap","drawerPaper","borderRight","logo","margin","links","icon","fontFamily","active","fontWeight","Sidebar","Drawer","anchor","paper","src","alt","List","ListItem","button","key","ListItemIcon","ListItemText","primary","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.925309c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25e47b12.png\";","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport RED from '@material-ui/core/colors/red'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"fixed\",\r\n        width: \"100%\",\r\n    },\r\n    box: {\r\n        width: \"15%\",\r\n        minWidth: \"175px\",\r\n    },\r\n    toolbar: {\r\n        backgroundColor: \"#E0E0E0\",\r\n    },\r\n    text: {\r\n        marginLeft: \"20px\",\r\n        color: RED[300],\r\n    }\r\n});\r\n\r\nfunction Navbar() {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>  \r\n            <Toolbar className={classes.toolbar}>\r\n                <div className={classes.box}/>\r\n                <div>\r\n                    <Typography variant=\"h6\" noWrap className={classes.text}>\r\n                        ATLASSIAN CHRONICLES\r\n                    </Typography>\r\n                </div>\r\n            </Toolbar>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport HomeIcon from '@material-ui/icons/HomeOutlined';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircleOutlined';\r\nimport FolderIcon from '@material-ui/icons/FolderOutlined';\r\n\r\nimport logo from './images/logo.png';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        \r\n    },\r\n    drawerPaper: {\r\n        borderRight: \"none\",\r\n    },\r\n    logo: {\r\n        width: \"15vw\",\r\n        minWidth: \"175px\",\r\n        margin: \"0 auto\",\r\n    },\r\n    links: {\r\n        margin: \"50px auto\",\r\n    },\r\n    icon: {\r\n        color: \"#757575\"\r\n    },\r\n    text: {\r\n        fontFamily: \"'Roboto', sans-serif\",\r\n        color: \"#757575\",\r\n    },\r\n    active: {\r\n        fontFamily: \"'Roboto', sans-serif\",\r\n        fontWeight: \"700\",\r\n        color: \"#757575\",\r\n    }\r\n});\r\n\r\nfunction Sidebar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer variant=\"permanent\" anchor=\"left\" className={classes.root} classes={{paper: classes.drawerPaper}}>\r\n            <img src={logo} alt=\"Logo\" className={classes.logo}/>\r\n            <List className={classes.links}>\r\n                <ListItem button key=\"Home\">\r\n                    <ListItemIcon className={classes.icon}><HomeIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Home\" className={classes.active}/>\r\n                </ListItem>\r\n                <ListItem button key=\"Characters\">\r\n                    <ListItemIcon className={classes.icon}><AccountCircleIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Characters\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Compendium\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Compendium\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Example1\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Example\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Example2\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Example\" className={classes.text} />\r\n                </ListItem>\r\n                <ListItem button key=\"Example3\">\r\n                    <ListItemIcon className={classes.icon}><FolderIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Example\" className={classes.text} />\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Navbar from './common/Navbar';\nimport Sidebar from './common/Sidebar';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Navbar />\n      <Sidebar />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}